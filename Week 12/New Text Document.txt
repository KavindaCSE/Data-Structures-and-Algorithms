#include <iostream>
#include <limits>
using namespace std;

#define V 6

void dijkstra(int graph[V][V], int src)
{
    int dist[V];
    bool sptSet[V];

    for (int i = 0; i < V; i++)
    {
        dist[i] = std::numeric_limits<int>::max();
        sptSet[i] = false;
    }

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++)
    {
        int u = -1;
        for (int v = 0; v < V; v++)
        {
            if (!sptSet[v] && (u == -1 || dist[v] < dist[u]))
                u = v;
        }

        sptSet[u] = true;

        for (int v = 0; v < V; v++)
        {
            if (!sptSet[v] && graph[u][v] != 0 && dist[u] != std::numeric_limits<int>::max()
                && dist[u] + graph[u][v] < dist[v])
            {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    cout << "Vertex \t time from Source" <<endl;
    for (int i = 0; i < V; i++)
    {
        cout << i << "\t\t\t\t" << dist[i] <<endl;
    }

    double total = 0;
    for (int i = 0; i < V; i++)
    {
        total += dist[i];
    }
    double average = total / (V - 1);
    cout << "Average time : " << average <<endl;
}

int main()
{
    int graph[V][V] = {{0, 10, 0, 0, 15, 5},
                      {10, 0, 10, 30, 0, 0},
                      {0, 10, 0, 12, 5, 0},
                      {0, 30, 12, 0, 0, 20},
                      {15, 0, 5, 0, 0, 0},
                      {5, 0, 0, 20, 0, 0}};

    for (int i = 0; i < V; i++)
    {
        cout << "Using city no " << i << endl;
        dijkstra(graph, i);
    }

    return 0;
}